# 类::名 包含 "Controller";
# 中文分词：("..myapp..") 类名称中包含 "Controller"
class("..myapp..")::function.name should contains("");
class("..myapp..")::function.name contains("");

class("..myapp..")::function.name should not contains("");
class("..myapp..")::function.name !contains("");

class("..myapp..")::vars.len should <= 20;
class("..myapp..")::function.vars.len should <= 20;

class(implementation "Connection.class")::name should endsWith "Connection";
class(extends "Connection.class")::name endsWith "Connection";

# todo: define in = inside = resideIn
class(assignable "EntityManager.class") in package("..persistence.");
class(assignable "EntityManager.class") inside package("..persistence.");

class(assignable "EntityManager.class") resideIn package("..persistence.");

class("com.myapp.(*)..") should freeOfCycles;

# 模型之间的关系
class("..myapp.model..")::relation.len should <= 5;

class("..myapp.(**)") not dependBy "";
class("..service..") only accessed(["..controller..", "..service.."]); //import关系
class("..service..")::name contains "Usecase"

package("..home..")::file.len should < 20;
# :: is Rust style, -> is C++ Style, so combine them
package("..home..") -> file.len should < 20;

# 正则表达式
package(match("^/app")) endsWith "Connection";

package("..home..")::name should not contains(matching(""));

# 简化的比较
class::name.len should < 20;
function::name.len should < 30;
function::len should < 30;

# 定制的分层架构
# 多条规则
layer("onion")
    ::domainModel("")
    ::domainService("")
    ::applicationService("")
    ::adapter("com.phodal.com", "zero");

