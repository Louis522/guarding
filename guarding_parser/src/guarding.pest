// online parser: [https://pest.rs/](https://pest.rs/)
start = _{ SOI ~ declaration* ~ EOI}

identifier = @{ (ASCII_ALPHA | ASCII_ALPHANUMERIC | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

declaration = {
  normal_rule |
  layer_rule
}

// package is a container of file and classes
// file is a container of classes and functions
// classes is a container of functions and field
normal_rule = {
	rule_level ~ "["? ~ attribute~("("? ~ scope ~ ")"?)?~"]"? ~ (use_symbol ~ expression)? ~ should? ~ only?~ can? ~ operator ~ assert? ~ "("? ~priority?~ ")"?~ ";"?~"␊"?
}

rule_level = {
    "package" |
    "class" |
    "struct" |   //在 C++ 中，class 和 struct 很相似，但默认访问级别不同。在 Java 和 C# 中，class 用于定义对象类型，而没有 struct 关键字。在 Rust 中，struct 用于定义数据类型，而没有 class 关键字。
    "function" | //面向对象中function 可能独立于任何特定的类或对象之外
    "file" |
    "method" |  // method 通常是指与某个对象或类关联的函数
    "parameter" |
    "codeBlock" |
    "entity" |
    "interface" |
    "object" |
    "variable"
}

layer_rule = {
	"layer" ~ "(" ~ layer_type ~ ")" ~ (use_symbol ~ layer_expression)* ~ ";"?
}
layer_type = {
    string
}

layer_expression = {
    identifier ~ "(" ~ string ~ (comma ~ string)* ~ ")"
}
// use property
use_symbol = {
    "::" |
    "->"
}


attribute = {
       attrib*
}
attrib = {
    "public" |
    "private" |
    "protected" |
    "static" |
    "final" |
    "abstract"|
    "activelynative"|
    "extensive" |
    "intrusivelynative" |
    "local" |
    "inner" |
    "interface" |
    "field" |
    "anonymous" |
    "API" |   //Todo 保留?
    "base" |
    "transitiveDependency" |
    "parameter" |
    "non-SDK-API" |
    "promoted-through-intrusive-modify" |
    "intrusive-modify" |
    "reflect-modify"
}


scope = {
    path_scope |   //只是一个路径,可以表示为"myapp1",来自myapp1的rulelevel
    impl_scope |   //(implementation "myapp1")实现了myapp1接口的类
    extend_scope | //(extends "myapp1")继承自myapp1的类
    assignable_scope | //(assignable "myapp1")可以赋值给myapp1的rulelevel(类)
    match_scope |  //package(match("^/app")) endsWith "Connection"; 在所有以".app"开始的包中查找那些类名以"Connection"结尾的类
    package_name_scope  |// 包名
    extensive_scope |
    actively_native_scope
}

path_scope = {
    string
}

match_scope = {
    "match" ~ string
}
assignable_scope = {
    "assignable" ~ string ~ extent
}
extend_scope = {
    "extends" ~ string ~ extent
}

impl_scope = {
    "implementation" ~ string ~ extent
}

actively_native_scope = {
    "activelynative" ~ string ~ extent
}

package_name_scope = {
    "packagename" ~string ~ extent
}
extensive_scope = {
    "extensive" ~ string ~ extent
}

extent ={
 ("," ~ string)*?
}

expression = {
    fn_call
}

fn_call = {
    identifier ~ (dot ~ identifier )*
}

assert = {
    leveled |
    stringed |
    array_stringed |
    sized
}

array_stringed = {
     rule_level? ~ "in"? ~ "[" ~ !"]" ~ !operator~ "in"? ~ (attribute ~ ( "(" ~ scope ~ ")" )?) ~ "]"
}

stringed = {
    "("? ~ "in"? ~ (scope?) ~ string ~ ")"?
}

leveled = {
    rule_level  ~"["? ~ "("?~ scope ~ ")"?~ "]"?
}

sized = {
    int
}

/*array_stringed = {
    "(" ~ "[" ~ string ~ ("," ~ string)* ~ "]" ~ ")"
}

stringed = {
    "("? ~ string ~ ")"?
}*/

operator = {
    op_not ~ operator |
    op_not_symbol ~ operator |
    op_lte |
    op_gte |
    op_lt |
    op_gt |
    op_eq |
    op_ineq |
	op_contains |
	op_endsWith |
	op_startsWith |
	op_resideIn |
	op_inside |
	op_accessBy |
	//op_dependBy |
	op_extend   |
	op_implement |
//	op_extendBy |
	op_freeOfCircular |
	op_embed |
	op_rewrite |
	op_inherit |
	op_dependOn |
	op_call |
	op_use |
	op_override |
	op_aggregate |



	op_BePublic  |
	op_BePrivate |
	op_BeProtected |
	op_BeStatic |
	op_BeFinal |
	op_BeAbstract |
	op_BeActivelyNative |
	op_BeExtensive |
	op_BeIntrusivelyNative
}

priority = {
   "HIGH" |
   "MEDIUM" |
   "LOW"
}

// todo: change to strings operations method
op_contains	      = { "contains" }
op_endsWith	      = { "endsWith" }
op_startsWith     = { "startsWith" }

// todo: thinking in define packages ops
op_inside	      = { "inside" }
op_resideIn	      = { "resideIn" }
op_accessBy	      = { "beAccessedBy" | "BeAccessedBy" }
op_dependBy	      = { "dependBy" }

op_extend         = { "extend" }
//op_extendBy       = { "extendBy" }
op_implement      = { "implement"}
op_freeOfCircular      = { "freeOfCircular"}
op_embed          = { "embed" }
op_rewrite        = { "rewrite" }
op_inherit        = { "inherit" }
op_dependOn       = { "dependOn" }
op_call           = { "call" }
op_use            = { "use" }
op_override       = { "override" }
op_aggregate      = { "aggregate" }



op_not            = @{ "not" }
op_not_symbol     = @{ "!" }

// todo: move to comparison;
op_lte            = { "<=" }
op_gte            = { ">=" }
op_lt             = { "<" }
op_gt             = { ">" }
op_eq             = { "=" }
op_ineq           = { "!=" }

//Dont need assert :   class[public ] should BeActivelyNative
op_BePublic        = { "BePublic" }
op_BePrivate        = { "BePrivate" }
op_BeProtected     = { "BeProtected" }
op_BeStatic        = { "BeStatic" }
op_BeFinal         = { "BeFinal" }
op_BeAbstract      = { "BeAbstract" }
op_BeActivelyNative = { "BeActivelyNative" }
op_BeExtensive     = { "BeExtensive" }
op_BeIntrusivelyNative = { "BeIntrusivelyNative" }

should            = { "should" }
only              = { "only" }
can               = { "can" }
double_quoted_string  = @{ "\"" ~ (!("\"") ~ ANY)* ~ "\""}
single_quoted_string  = @{ "\'" ~ (!("\'") ~ ANY)* ~ "\'"}
double_quoted_string_chinese  = @{ "“" ~ (!("”") ~ ANY)* ~ "”"}
string = @{
    double_quoted_string |
    single_quoted_string |
    double_quoted_string_chinese
}

number = @{ '0'..'9'+ }
int = @{ number | "-" ~ "0"* ~ '1'..'9' ~ number? }

dot                 = { "." }
comma               = { "," }
semicolon           = { ";" }
opening_paren       = { "(" }
closing_paren       = { ")" }


newline    = _{ "\n" | "\r\n" }
WHITESPACE = _{ " " | "\t" | newline }
block_comment = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }
COMMENT    = _{ block_comment | ("//" ~ (!newline ~ ANY)*) }