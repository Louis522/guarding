// online parser: [https://pest.rs/](https://pest.rs/)
start = _{ SOI ~ declaration* ~ EOI}

identifier = @{ (ASCII_ALPHA | ASCII_ALPHANUMERIC | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

declaration = {
  normal_rule |
  layer_rule
}

// package is a container of file and classes
// file is a container of classes and functions
// classes is a container of functions and field
normal_rule = {
	rule_level ~ "["~attribute~("(" ~ scope ~ ")")?~"]" ~ (use_symbol ~ expression)? ~ should? ~ only? ~ operator ~ assert? ~ "("? ~priority?~ ")"?~ ";"?
}

rule_level = {
    "package" |
    "class" |
    "struct" |
    "function" |
    "file" |
    "method" |
    "parameter" |
    "codeBlock" |
    "entity" |
    "interface" |
    "object" |
    "API"
}

layer_rule = {
	"layer" ~ "(" ~ layer_type ~ ")" ~ (use_symbol ~ layer_expression)* ~ ";"?
}

// use property
use_symbol = {
    "::" |
    "->"
}

layer_type = {
    string
}

layer_expression = {
    identifier ~ "(" ~ string ~ (comma ~ string)* ~ ")"
}
attribute = {
       attrib*
}
attrib = {
    "public" |
    "private" |
    "protected" |
    "static" |
    "final" |
    "abstract"|
    "activelynative"|
    "extensive" |
    "intrusivelynative" |
    "local" |
    "inner" |
    "interface" |
    "field" |
    "anonymous" |
    "non-SDK" |
    "API" |
    "intrusiveModify" |
    "base" |
    "transitiveDependency"
}


scope = {
    path_scope |
    impl_scope |
    extend_scope |
    assignable_scope |
    match_scope |
    actively_native_scope |
    package_name_scope |
    extensive_scope
}

path_scope = {
    string
}

match_scope = {
    "match" ~ "(" ~ string ~ ")"
}
assignable_scope = {
    "assignable" ~ string ~ extent
}
extend_scope = {
    "extends" ~ string ~ extent
}

impl_scope = {
    "implementation" ~ string ~ extent
}

actively_native_scope = {
    "activelynative" ~ string ~ extent
}

package_name_scope = {
    "packagename" ~string ~ extent
}
extensive_scope = {
    "extensive" ~ string ~ extent
}

extent ={
 ("," ~ string)*?
}

expression = {
    fn_call
}

fn_call = {
    identifier ~ (dot ~ identifier )*
}

assert = {
    leveled |
    stringed |
    array_stringed |
    sized
}

array_stringed = {
    rule_level?~ "["~attribute? ~"("?  ~ scope?~ ")"?~ "]"
}

stringed = {
    "("?~ (scope?) ~ string ~ ")"?
}

leveled = {
    rule_level ~ "(" ~ scope? ~ ")"
}

sized = {
    int
}

/*array_stringed = {
    "(" ~ "[" ~ string ~ ("," ~ string)* ~ "]" ~ ")"
}

stringed = {
    "("? ~ string ~ ")"?
}*/

operator = {
    op_not ~ operator |
    op_not_symbol ~ operator |
    op_lte |
    op_gte |
    op_lt |
    op_gt |
    op_eq |
    op_ineq |
	op_contains |
	op_endsWith |
	op_startsWith |
	op_resideIn |
	op_inside |
	op_accessBy |
	op_dependBy |
//	op_extend  |
	op_implement |
	op_extendBy |
	op_freeOfCircle |
	op_embed |
	op_rewrite |
	op_inherit |
	op_dependOn |



	op_BePublic  |
	op_BePrivate |
	op_BeProtected |
	op_BeStatic |
	op_BeFinal |
	op_BeAbstract |
	op_BeActivelyNative |
	op_BeExtensive |
	op_BeIntrusivelyNative
}

priority = {
   "HIGH" |
   "MEDIUM" |
   "LOW"
}
// todo: change to strings operations method
op_contains	      = { "contains" }
op_endsWith	      = { "endsWith" }
op_startsWith     = { "startsWith" }

// todo: thinking in define packages ops
op_inside	      = { "inside" }
op_resideIn	      = { "resideIn" }
op_accessBy	      = { "accessBy" }
op_dependBy	      = { "dependBy" }

//op_extend         = { "extend" }
op_extendBy       = { "extendBy" }
op_implement      = { "implement"}
op_freeOfCircle      = { "freeOfCircle"}
op_embed          = { "embed" }
op_rewrite        = { "rewrite" }
op_inherit        = { "inherit" }
op_dependOn       = { "dependOn" }


op_not            = @{ "not" }
op_not_symbol     = @{ "!" }

// todo: move to comparison;
op_lte            = { "<=" }
op_gte            = { ">=" }
op_lt             = { "<" }
op_gt             = { ">" }
op_eq             = { "=" }
op_ineq           = { "!=" }

//Dont need assert :   class[public ] should BeActivelyNative
op_BePublic        = { "BePublic" }
op_BePrivate        = { "BePrivate" }
op_BeProtected     = { "BeProtected" }
op_BeStatic        = { "BeStatic" }
op_BeFinal         = { "BeFinal" }
op_BeAbstract      = { "BeAbstract" }
op_BeActivelyNative = { "BeActivelyNative" }
op_BeExtensive     = { "BeExtensive" }
op_BeIntrusivelyNative = { "BeIntrusivelyNative" }

should            = { "should" }
only              = { "only" }

double_quoted_string  = @{ "\"" ~ (!("\"") ~ ANY)* ~ "\""}
single_quoted_string  = @{ "\'" ~ (!("\'") ~ ANY)* ~ "\'"}

string = @{
    double_quoted_string |
    single_quoted_string
}

number = @{ '0'..'9'+ }
int = @{ number | "-" ~ "0"* ~ '1'..'9' ~ number? }

dot                 = { "." }
comma               = { "," }
semicolon           = { ";" }
opening_paren       = { "(" }
closing_paren       = { ")" }


newline    = _{ "\n" | "\r\n" }
WHITESPACE = _{ " " | "\t" | newline }
block_comment = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }
COMMENT    = _{ block_comment | ("//" ~ (!newline ~ ANY)*) }