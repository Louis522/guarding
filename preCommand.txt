·<自然语言描述规则，DSL语法，规则的DSL>,我需要的输出结果是描述规则的DSL，请学习我给出的这几个例子，而后我会输入自然语言描述规则，请输出 规则的DSL(只生成结果)。
·DSL语法{
rule_level ~ "["~attribute~("(" ~ scope ~ ")")?~"]"  ~ should? ~ only? ~ operator ~ assert? ~ ";"?

rule_level = {
    "package" |
    "class" |
    "struct" |
    "function" |
    "file" |
    "method" |
    "parameter"
}
attribute = {
       attrib*
}
attrib = {
    "public" |
    "private" |
    "protected" |
    "static" |
    "final" |
    "abstract"|
    "activelynative"|
    "extensive"|
    "intrusivelynative"
}

scope = {
    actively_native_scope |
    package_name_scope |
    extensive_scope
}

actively_native_scope = {
    "activelynative" ~ string ~ extent
}

package_name_scope = {
    "packagename" ~ string ~ extent
}
extensive_scope = {
    "extensive" ~ string ~ extent
}
extent ={
 ("," ~ string)*?
}

assert = {
    leveled |
    stringed |
    array_stringed |
    sized
}

array_stringed = {
    rule_level?~ "["~attribute? ~"("  ~ (scope?) ~ ")"~ "]"
}

stringed = {
    "("?~ (scope?) ~ string ~ ")"?
}

leveled = {
    rule_level ~ "(" ~ scope? ~ ")"
}

sized = {
    int
}
operator = {

	op_accessBy |
	op_dependBy |
    op_extend  |
	op_implement |
	op_extendBy |
	op_freeOfCircle
    op_embed |
	op_BePublic  |
	op_BePrivate |
	op_BeProtected |
	op_BeStatic |
	op_BeFinal |
	op_BeAbstract |
	op_BeActivelyNative |
	op_BeExtensive |
	op_BeIntrusivelyNative
}
op_accessBy	      = { "accessBy" }
op_dependBy	      = { "dependBy" }
op_extendBy       = { "extendBy" }
op_implement      = { "implement"}
op_freeOfCircle      = { "freeOfCircle"}

// class[public ] should BeActivelyNative
op_BePublic        = { "BePublic" }
op_BePrivate        = { "BePrivate" }
op_BeProtected     = { "BeProtected" }
op_BeStatic        = { "BeStatic" }
op_BeFinal         = { "BeFinal" }
op_BeAbstract      = { "BeAbstract" }
op_BeActivelyNative = { "BeActivelyNative" }
op_BeExtensive     = { "BeExtensive" }
op_BeIntrusivelyNative = { "BeIntrusivelyNative" }

should            = { "should" }
only              = { "only" }

}
·学习例子
<packgeA里伴生的类不应该被packageB里原生的类继承，rule_level ~ “[”~attribute~(“(” ~ scope ~ “)”)?~“]” ~ should? ~ only? ~ operator ~ assert? ~ “;”?，class[extensive(packagename “packageA”)] should not extendedBy class[activelynative(packagename “packageB”)]>；
<packgeA里公共的类不应该被packageB里的final类继承， rule_level ~ "["~attribute~("(" ~ scope ~ ")")?~"]" ~ should? ~ only? ~ operator ~ assert? ~ ";"?,class[public(packagename “packageA”)] should not extendedBy class[final(packagename “packageB”)]>；
<packgeC里伴生的,公共的类不应该被packageB，packageC,packageD里原生的类继承， rule_levsel ~ “[”~attribute~(“(” ~ scope ~ “)”)?~“]” ~ should? ~ only? ~ operator ~ assert? ~ “;”?，class[extensive public (packagename “packageC”)] should not extendedBy class[activelynative(packagename “packageB”,”packageC”,”packageD”)]>；
<packgeB,packageC里伴生的,公共的类不可以被packageD里原生的,公共的类实现， rule_level ~ “[”~attribute~(“(” ~ scope ~ “)”)?~“]” ~ should? ~ only? ~ operator ~ assert? ~ “;”?，class[extensive public (packagename “packageB”,”packageC”)] should not implement class[activelynative public(packagename “packageD”)]>；
<packgeD里伴生的,公共的,静态的类不会被packageB里原生的,公共的类实现， rule_level ~ “[”~attribute~(“(” ~ scope ~ “)”)?~“]” ~ should? ~ only? ~ operator ~ assert? ~ “;”?，class[extensive public static (packagename "packageD")] should not implement class[activelynative public(packagename "packageB")]>
<伴生的,公共的,静态的类不会被原生的,公共的类实现， rule_level ~ “[”~attribute~(“(” ~ scope ~ “)”)?~“]” ~ should? ~ only? ~ operator ~ assert? ~ “;”?，class[extensive public static] should not implement class[activelynative public]>
<伴生的,公共的,静态的类可以被原生的,公共的类实现， rule_level ~ “[”~attribute~(“(” ~ scope ~ “)”)?~“]” ~ should? ~ only? ~ operator ~ assert? ~ “;”?，class[extensive public static] should implement class[activelynative public]>
<原生的,公共的类可以被原生的,静态的类实现， rule_level ~ “[”~attribute~(“(” ~ scope ~ “)”)?~“]” ~ should? ~ only? ~ operator ~ assert? ~ “;”?，class[activilynative public] should implement class[extensive static]>
<原生的方法不能嵌入伴生的参数， rule_level ~ “[”~attribute~(“(” ~ scope ~ “)”)?~“]” ~ should? ~ only? ~ operator ~ assert? ~ “;”?，methods().that().areActivelyNative().should().notEmbedParametersThat().areExtensive()>
<原生的方法应该嵌入伴生的参数， rule_level ~ “[”~attribute~(“(” ~ scope ~ “)”)?~“]” ~ should? ~ only? ~ operator ~ assert? ~ “;”?，methods().that().areActivelyNative().should().EmbedParametersThat().areExtensive()>


