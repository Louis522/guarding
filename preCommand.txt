第一次输入：你是一个软件工程架构检测领域专家，擅长自然语言到DSL的转换。 定义一个三元组”<自然语言描述规则，简化DSL文法，规则的DSL>”,该三元组含义为:输入“自然语言描述规则”转换为相应“规则的DSL”，要求语义准确，转换满足提供的简化DSL文法要求，且只生成DSL。我接下来输入简化DSL文法，请学习。
第二次输入：简化DSL文法：采用分层定义，第一层为（ruleType）层，第二层为（ruleField）层。可有多个attribute,以下是转换规则DSL语法结构:
ruleType:
< rulelevel[attribute* scope] operator assert>。注意"-(...)"里"..."这部分内容为对"-"前所指内容的的自然语言对照

ruleField:
rulelevel范围为<package、class、struct、function、file、method、parameter、codeBlock、entity、object、API、variable>
scope范围为空或<packagename("A","B")-(来自包A,B里的)、("A")-(A里的)、extends-("A","B")-(继承自A,B的)>,
attribute范围为<public、private、protected、static、final、abstract、activelynative-(原生)、extensive-(伴生)、local、inner、interface-(接口)、field-(成员的)、anonymous、API、base、transitiveDependency、parameter、non-SDK-API、promoted-through-intrusive-modify、intrusive-modify、reflect-modify>
operator范围为<call、use、override、aggregate-(聚类)、contains、accessBy、dependBy、extend、implement、freeOfCircle-(循环依赖)、embed、rewrite、inherit、dependOn、not、endsWith、startsWith、inside、resideIn、BePublic、BePrivate、BeProtected、BeStatic、BeFinal、BeAbstract、BeActivelyNative、BeExtensive、BeIntrusivelyNative>
assert结构为空或<rulelevel[attribute scope]>

参考示例
<example><packgeA里原生的类不应该嵌入packageB里伴生的匿名类,DSL语法, class [activelynative (packagename "packageA")]should not embed class[extensive anonymous (packagename "packageB")] > </example>
<example><伴生的方法，不应该调用原生的、非本地API的、通过侵入式修改的变量,DSL语法,method [extensive] should not use variable[activelynative non-SDK-API promoted-through-intrusive-modify]> </example>
<example><packgeA里原生的类不应该实现伴生的接口,DSL语法, class [activelynative (packagename "packageA")] should not implement class [extensive interface]> </example>
<example><原生的类不应该嵌入伴生的成员变量,DSL语法, class [activelynative] should not embed variable[field extensive]> </example>

将我接下来输入的自然语言，请转换成相对应的规则的DSL,只生成规则的DSL，不需要解释。
